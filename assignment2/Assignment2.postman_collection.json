{
	"info": {
		"_postman_id": "7a1972c0-779a-44af-a0be-4977acb367ad",
		"name": "Assignment2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31541777"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required field 'message'\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify response message is descriptive and informative\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"kashyapkalathiya92@gmail.com\",\n    \"password\": \"Kashyap@123\",\n    \"username\": \"Kashyap\",\n    \"shippingAddress\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user).to.have.property('_id');",
									"    pm.expect(user).to.have.property('email');",
									"    pm.expect(user).to.have.property('password');",
									"    pm.expect(user).to.have.property('username');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Shipping address should be either null or an object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user).to.have.property('shippingAddress').that.is.null.or.an('object');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the __v field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(user){",
									"    pm.expect(user.__v).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"  pm.expect(pm.response.code).to.equal(500);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message object structure is as expected\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.an('object');",
									"    pm.expect(responseData.message).to.have.property('stringValue');",
									"    pm.expect(responseData.message).to.have.property('valueType');",
									"    pm.expect(responseData.message).to.have.property('kind');",
									"    pm.expect(responseData.message).to.have.property('value');",
									"    pm.expect(responseData.message).to.have.property('path');",
									"    pm.expect(responseData.message).to.have.property('reason');",
									"    pm.expect(responseData.message).to.have.property('name');",
									"    pm.expect(responseData.message).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"StringValue and value must be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message.stringValue).to.be.a('string').and.to.have.lengthOf.at.least(1, \"StringValue should not be empty\");",
									"  pm.expect(responseData.message.value).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence and format of the 'reason' object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message.reason).to.be.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/667a6393785876bfb84c517b",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"667a6393785876bfb84c517b"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/user/667a6408785876bfb84c518f",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"user",
								"667a6408785876bfb84c518f"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Add Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('_id');",
									"    pm.expect(responseData).to.have.property('description');",
									"    pm.expect(responseData).to.have.property('image');",
									"    pm.expect(responseData).to.have.property('pricing');",
									"    pm.expect(responseData).to.have.property('shippingCost');",
									"    pm.expect(responseData).to.have.property('__v');",
									"});",
									"",
									"",
									"pm.test(\"Pricing and shippingCost are non-negative numbers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData.pricing).to.be.a('number').and.to.be.at.least(0, \"Pricing should be a non-negative number\");",
									"    pm.expect(responseData.shippingCost).to.be.a('number').and.to.be.at.least(0, \"Shipping cost should be a non-negative number\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"No unexpected fields in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.not.include.any.keys('unexpectedField1', 'unexpectedField2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"T-Shirt\",\n    \"image\": \"Image_URL\",\n    \"pricing\": 200,\n    \"shippingCost\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(product) {",
									"        pm.expect(product).to.have.property('_id');",
									"        pm.expect(product).to.have.property('description');",
									"        pm.expect(product).to.have.property('image');",
									"        pm.expect(product).to.have.property('pricing');",
									"        pm.expect(product).to.have.property('shippingCost');",
									"        pm.expect(product).to.have.property('__v');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Pricing and shippingCost are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(product) {",
									"        pm.expect(product.pricing).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Pricing should be non-negative\");",
									"        pm.expect(product.shippingCost).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Shipping cost should be non-negative\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/product/668b3bb075883539fd4df498",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"product",
								"668b3bb075883539fd4df498"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Add Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('_id');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('products');",
									"    pm.expect(responseData).to.have.property('__v');",
									"});",
									"",
									"",
									"pm.test(\"Products array must contain at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.products).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Quantity in the products array is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.products).to.be.an('array');",
									"    responseData.products.forEach(function(product) {",
									"        pm.expect(product.quantity).to.be.a('number');",
									"        pm.expect(product.quantity).to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"667a6393785876bfb84c517b\",\n    \"products\": [\n        {\n            \"product\": \"667a6393785876bfb84c517b\",\n            \"quantity\": 2\n        }\n    ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - _id, user, products, __v\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item._id).to.exist;",
									"        pm.expect(item.user).to.exist;",
									"        pm.expect(item.products).to.exist;",
									"        pm.expect(item.__v).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each product in the 'products' array contains product and quantity fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('product');",
									"        pm.expect(item).to.have.property('quantity');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the '__v' field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.__v).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cart/668b2d3375883539fd4df43c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cart",
								"668b2d3375883539fd4df43c"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Add Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('_id', 'product', 'user', 'rating', 'images', 'text', '__v');",
									"});",
									"",
									"",
									"pm.test(\"Product and user must be non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.product).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Product should not be empty\");",
									"    pm.expect(responseData.user).to.be.a('string').and.to.have.lengthOf.at.least(1, \"User should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Rating is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.rating).to.be.a('number');",
									"    pm.expect(responseData.rating).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Images should be an array and not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.images).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Images array should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"product\": \"668b2caf75883539fd4df439\",\n    \"user\": \"667a6393785876bfb84c517b\",\n    \"rating\": 2,\n    \"images\": [],\n    \"text\": \"Good\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Each comment has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(comment) {",
									"        pm.expect(comment).to.have.property('_id');",
									"        pm.expect(comment).to.have.property('product');",
									"        pm.expect(comment).to.have.property('user');",
									"        pm.expect(comment).to.have.property('rating');",
									"        pm.expect(comment).to.have.property('images');",
									"        pm.expect(comment).to.have.property('text');",
									"        pm.expect(comment).to.have.property('__v');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Rating is within the valid range\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(comment => {",
									"        pm.expect(comment.rating).to.be.a('number');",
									"        pm.expect(comment.rating).to.be.at.least(0);",
									"        pm.expect(comment.rating).to.be.at.most(5);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Images array should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(comment => {",
									"        pm.expect(comment.images).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Images array should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/comment/668b2e5e75883539fd4df449",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"comment",
								"668b2e5e75883539fd4df449"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('_id');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('products');",
									"    pm.expect(responseData).to.have.property('totalCost');",
									"    pm.expect(responseData).to.have.property('date');",
									"    pm.expect(responseData).to.have.property('__v');",
									"});",
									"",
									"",
									"pm.test(\"Products array contains at least one element with non-empty product and positive quantity\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.products.forEach(function(product) {",
									"        pm.expect(product).to.be.an('object');",
									"        pm.expect(product.product).to.be.a('string').that.is.not.empty;",
									"        pm.expect(product.quantity).to.be.a('number').that.is.greaterThan(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Total cost is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.totalCost).to.be.a('number');",
									"    pm.expect(responseData.totalCost).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": \"667a6393785876bfb84c517b\",\n    \"products\": [\n        {\n            \"product\": \"667a6393785876bfb84c517b\",\n            \"quantity\": 2\n        }\n    ],\n    \"totalCost\": 400,\n    \"date\":\"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the order object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(order) {",
									"        pm.expect(order).to.be.an('object');",
									"        pm.expect(order._id).to.exist.and.to.be.a('string');",
									"        pm.expect(order.user).to.exist.and.to.be.a('string');",
									"        pm.expect(order.products).to.exist.and.to.be.an('array');",
									"        order.products.forEach(function(product) {",
									"            pm.expect(product).to.be.an('object');",
									"            pm.expect(product.product).to.exist.and.to.be.a('string');",
									"            pm.expect(product.quantity).to.exist.and.to.be.a('number');",
									"            pm.expect(product._id).to.exist.and.to.be.a('string');",
									"        });",
									"        pm.expect(order.totalCost).to.exist.and.to.be.a('number');",
									"        pm.expect(order.date).to.exist.and.to.be.a('string');",
									"        pm.expect(order.__v).to.exist.and.to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Products array contains expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(order) {",
									"        pm.expect(order.products).to.be.an('array');",
									"        order.products.forEach(function(product) {",
									"            pm.expect(product).to.have.property('product');",
									"            pm.expect(product).to.have.property('quantity');",
									"            pm.expect(product).to.have.property('_id');",
									"        });",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Total cost is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(order) {",
									"        pm.expect(order.totalCost).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"order"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}